/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Assignment;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

/**
 *
 * @author kevin
 */
public class DetailsFrame extends javax.swing.JFrame {

   
    static DefaultTableModel tablemodel= new DefaultTableModel(0,3);
    
    Fileoperations fp;
    String status = "false";
    public static String Firstnameresult = "false";
    public static String Lastnameresult = "false";
    public static String Address1result = "false";
    public static String Cityresult = "false";
    public static String Stateresult = "false";
    public static String Zipcoderesult = "false";
    public static String Phonenumberresult = "false";
    public static String Countryresult = "false";
    public static String Emailresult = "false";
    int value = 0;
    /**
     * Creates new form DetailsFrame
     */
    public DetailsFrame() {
        initComponents();
        Firstnamefield.setDocument(new JTextFieldLimit(20));
        Lastnamefield.setDocument(new JTextFieldLimit(20));
        Address1field.setDocument(new JTextFieldLimit(35));
        Address2field.setDocument(new JTextFieldLimit(35));
        Cityfield.setDocument(new JTextFieldLimit(25));
        Statefield.setDocument(new JTextFieldLimit(2));
        Zipcodefield.setDocument(new JTextFieldLimit(9));
        Phonenumberfield.setDocument(new JTextFieldLimit(21));
        Countryfield.setDocument(new JTextFieldLimit(30));
        Emailfield.setDocument(new JTextFieldLimit(100));
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        Maintable = new javax.swing.JTable();
        Firstnamelabel = new javax.swing.JLabel();
        Middlenamelabel = new javax.swing.JLabel();
        Lastnamelabel = new javax.swing.JLabel();
        Address1label = new javax.swing.JLabel();
        Address2label = new javax.swing.JLabel();
        Citylabel = new javax.swing.JLabel();
        Statelabel = new javax.swing.JLabel();
        Zipcodelabel = new javax.swing.JLabel();
        Phonenumberlabel = new javax.swing.JLabel();
        Genderlabel = new javax.swing.JLabel();
        Firstnamefield = new javax.swing.JTextField();
        Middlenamefield = new javax.swing.JTextField();
        Lastnamefield = new javax.swing.JTextField();
        Address1field = new javax.swing.JTextField();
        Address2field = new javax.swing.JTextField();
        Cityfield = new javax.swing.JTextField();
        Statefield = new javax.swing.JTextField();
        Zipcodefield = new javax.swing.JTextField();
        Phonenumberfield = new javax.swing.JTextField();
        Genderfield = new javax.swing.JComboBox();
        Addbutton = new javax.swing.JButton();
        Savebutton = new javax.swing.JButton();
        Deletebutton = new javax.swing.JButton();
        lMessage = new javax.swing.JLabel();
        lMessage2 = new javax.swing.JLabel();
        jProgressBar = new javax.swing.JProgressBar();
        Countrylabel = new javax.swing.JLabel();
        Countryfield = new javax.swing.JTextField();
        Emaillabel = new javax.swing.JLabel();
        Emailfield = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DetailsFrame");
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        Maintable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Maintable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Maintable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                MaintableFocusLost(evt);
            }
        });
        Maintable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MaintableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Maintable);
        Maintable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        Firstnamelabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Firstnamelabel.setText("First Name :*");

        Middlenamelabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Middlenamelabel.setText("Middle Name :");

        Lastnamelabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Lastnamelabel.setText("Last Name :*");

        Address1label.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Address1label.setText("Address Line 1 :*");

        Address2label.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Address2label.setText("Address Line 2 :");

        Citylabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Citylabel.setText("City :*");

        Statelabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Statelabel.setText("State :*");

        Zipcodelabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Zipcodelabel.setText("Zip Code :*");

        Phonenumberlabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Phonenumberlabel.setText("Phone Number :*");

        Genderlabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Genderlabel.setText("Gender :*");

        Firstnamefield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                FirstnamefieldFocusLost(evt);
            }
        });

        Middlenamefield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                MiddlenamefieldFocusLost(evt);
            }
        });
        Middlenamefield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MiddlenamefieldActionPerformed(evt);
            }
        });

        Lastnamefield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                LastnamefieldFocusLost(evt);
            }
        });

        Address1field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                Address1fieldFocusLost(evt);
            }
        });

        Address2field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                Address2fieldFocusLost(evt);
            }
        });

        Cityfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                CityfieldFocusLost(evt);
            }
        });

        Statefield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                StatefieldFocusLost(evt);
            }
        });

        Zipcodefield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ZipcodefieldFocusLost(evt);
            }
        });

        Phonenumberfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                PhonenumberfieldFocusLost(evt);
            }
        });

        Genderfield.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Genderfield.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Male", "Female", " " }));

        Addbutton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Addbutton.setText("Add ");
        Addbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddbuttonActionPerformed(evt);
            }
        });

        Savebutton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Savebutton.setText("Save");
        Savebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavebuttonActionPerformed(evt);
            }
        });

        Deletebutton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Deletebutton.setText("Delete");
        Deletebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletebuttonActionPerformed(evt);
            }
        });

        lMessage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lMessage.setForeground(new java.awt.Color(0, 153, 0));
        lMessage.setMaximumSize(new java.awt.Dimension(10, 10));
        lMessage.setMinimumSize(new java.awt.Dimension(10, 10));
        lMessage.setPreferredSize(new java.awt.Dimension(10, 10));

        lMessage2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lMessage2.setForeground(new java.awt.Color(255, 0, 0));

        jProgressBar.setBackground(new java.awt.Color(51, 51, 51));
        jProgressBar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jProgressBar.setForeground(new java.awt.Color(0, 0, 255));
        jProgressBar.setToolTipText("shows your Progress !");
        jProgressBar.setStringPainted(true);

        Countrylabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Countrylabel.setText("Country:*");

        Countryfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                CountryfieldFocusLost(evt);
            }
        });

        Emaillabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Emaillabel.setText("E-mail Address :*");

        Emailfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                EmailfieldFocusLost(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Addbutton)
                                .addGap(68, 68, 68)
                                .addComponent(Savebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addComponent(Deletebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(79, 79, 79)
                                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lMessage2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Firstnamelabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Middlenamelabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Lastnamelabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Address1label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Address2label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Citylabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Statelabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Zipcodelabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Phonenumberlabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(Genderlabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Countrylabel)
                            .addComponent(Emaillabel))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(Firstnamefield, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(Lastnamefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Middlenamefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Address1field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Address2field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Cityfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Statefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Zipcodefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Phonenumberfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(92, 92, 92))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Countryfield, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Emailfield, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Genderfield, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Address1field, Address2field, Cityfield, Firstnamefield, Lastnamefield, Middlenamefield, Phonenumberfield, Statefield, Zipcodefield});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Firstnamelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Firstnamefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Middlenamelabel)
                            .addComponent(Middlenamefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Lastnamelabel)
                            .addComponent(Lastnamefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Address1label)
                            .addComponent(Address1field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Address2label)
                            .addComponent(Address2field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Citylabel)
                            .addComponent(Cityfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Statelabel)
                            .addComponent(Statefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Zipcodelabel)
                            .addComponent(Zipcodefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Phonenumberlabel)
                            .addComponent(Phonenumberfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Addbutton)
                            .addComponent(Savebutton)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Deletebutton)
                                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Genderlabel)
                            .addComponent(Genderfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Countrylabel)
                            .addComponent(Countryfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Emaillabel)
                            .addComponent(Emailfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lMessage2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Address1label, Address2label, Citylabel, Firstnamelabel, Genderlabel, Lastnamelabel, Middlenamelabel, Phonenumberlabel, Statelabel, Zipcodelabel});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Address1field, Address2field, Cityfield, Firstnamefield, Lastnamefield, Middlenamefield, Phonenumberfield, Statefield, Zipcodefield});

        setBounds(100, 100, 1059, 627);
    }// </editor-fold>//GEN-END:initComponents

    private void MiddlenamefieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MiddlenamefieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MiddlenamefieldActionPerformed

    private void AddbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddbuttonActionPerformed
        lMessage.setText("");
        lMessage2.setText("");
        
       Fileoperations f1 = new Fileoperations();
       Validation validate = new Validation();
      
       /*
       The below condition checks if all mandatory fields are filled
       */
        if((!Firstnamefield.getText().trim().equals(""))&(!Lastnamefield.getText().equals(""))&&(!Address1field.getText().equals(""))&&(!Cityfield.getText().equals(""))&&(!Statefield.getText().equals(""))&&(!Zipcodefield.getText().equals(""))&&(!Phonenumberfield.getText().equals(""))&&(!Countryfield.getText().equals(""))&&(!Emailfield.getText().equals(""))){
            lMessage.setText(""); 
            /*
            below condition  checks whether validation is alright 
            */
            if (status.equals("true")) {
                status = f1.WriteToFile(); 
                /*
                below if checks whether the row is already present or not else displays message
                */
                if(status.equals("true"))
                        {
                            tablemodel.addRow(new Object[]{Firstnamefield.getText(),Lastnamefield.getText(),Phonenumberfield.getText()});
                             lMessage.setText("New row added Successfully ! "); 
                             jProgressBar.setValue(100);
                             jProgressBar.setString("100%");
                             Firstnamefield.requestFocus();
                             String s1 =validate.Clear();
                        }
                else
                {
                    lMessage2.setText("Same record exists.Can't add again ! "); 
                }
                }
             else {
                     lMessage2.setText("Invalid data entry! Please revisit the fields"); 
                  }
        }
       else{
           lMessage2.setText("Please fill all mandatory fields");
            }
      
       
    }//GEN-LAST:event_AddbuttonActionPerformed
       
    
    private void SavebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavebuttonActionPerformed
        lMessage.setText("");
        lMessage2.setText("");
        Fileoperations f2 = new Fileoperations();
        Validation validate = new Validation();
        String status = "false";
        jProgressBar.setEnabled(false);
        /*
        Below condition checks whether a row is selected in table or not .Else displays message
        */        
        if(Maintable.getSelectedRow()!=-1)
        {
           lMessage.setText(""); 
           status = f2.SaveToFile();  
            /*
            The below condition checks if all mandatory fields are filled
            */ 
           if((!Firstnamefield.getText().trim().equals(""))&(!Lastnamefield.getText().equals(""))&&(!Address1field.getText().equals(""))&&(!Cityfield.getText().equals(""))&&(!Statefield.getText().equals(""))&&(!Zipcodefield.getText().equals(""))&&(!Phonenumberfield.getText().equals("")))
            {
                /*
                below if checks whether the row is already present or not else displays message
                */
             if (status.equals("true"))
             {
              lMessage.setText("Saved Successfully ! "); 
              tablemodel.setValueAt(Firstnamefield.getText(), Maintable.getSelectedRow(), 0);
              tablemodel.setValueAt(Lastnamefield.getText(), Maintable.getSelectedRow(), 1);
              tablemodel.setValueAt(Phonenumberfield.getText(), Maintable.getSelectedRow(), 2);
              jProgressBar.setVisible(true);
              jProgressBar.setEnabled(true);
              value =0 ;
              jProgressBar.setValue(value);
              jProgressBar.setString(Integer.toString(value)+'%');
              Firstnamefield.requestFocus();
              Maintable.getSelectionModel().clearSelection();
              String s1 =validate.Clear();
              Savebutton.setEnabled(false);
              }
             else
              {
                  lMessage2.setText("Same record exists.Can't save ! "); 
              }
            }
            else     
            {
                lMessage2.setText("Please fill all mandatory fields ! ");      
            }  
        }
            
        else
        {
            lMessage2.setText("No row is selected ! ");
        }       
    }//GEN-LAST:event_SavebuttonActionPerformed
    
    private void MaintableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MaintableMouseClicked
        lMessage.setText("");
        lMessage2.setText("");
        Fileoperations f1 =new Fileoperations();
        /*
        Below method calls fills text field with selected row data
        */
        String s1 = f1.selectedrow();
        /*
        int value = 70;
        jProgressBar.setStringPainted(true);
        jProgressBar.setValue(value);
        jPrjProgressBar.setValue(value);ogressBar.setString("70%"); */
        jProgressBar.setVisible(false);
        Savebutton.setEnabled(true);
        Deletebutton.setEnabled(true);
        try {
            Thread.sleep(200);
             lMessage.setText("");
        } catch (InterruptedException ex) {
            Logger.getLogger(DetailsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_MaintableMouseClicked

    private void DeletebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletebuttonActionPerformed
       lMessage.setText("");
       lMessage2.setText("");
       Fileoperations f2 = new Fileoperations();
       Validation validate = new Validation();
       String status = "false";
        /*
        Below condition checks whether a row is selected in table or not .Else displays message
        */  
       if(Maintable.getSelectedRow()!=-1){
           lMessage.setText(""); 
            status = f2.DeleteFromFile();
            tablemodel.removeRow(Maintable.getSelectedRow());
            jProgressBar.setVisible(true);
            jProgressBar.setEnabled(true);
            value =0 ;
            jProgressBar.setValue(value);
            jProgressBar.setString(Integer.toString(value)+'%');
            Firstnamefield.requestFocus();
            String s1 =validate.Clear();
            Deletebutton.setEnabled(false);
            
        }
        else
        {
            lMessage2.setText("No row is selected ! ");
        }
      /*
       Below condition Checks whether the deletion was successful or not 
       */
       if (status.equals("true"))
          lMessage.setText("Deleted Successfully ! "); 
       
    }//GEN-LAST:event_DeletebuttonActionPerformed

    private void FirstnamefieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FirstnamefieldFocusLost
        lMessage.setText("");
        lMessage2.setText("");
        Validation validate = new Validation();
        status="false";
        
        /*
        Below method call validates Firstname Field
        */
        boolean s1= validate.validateName(Firstnamefield.getText());
                
           if(!s1)
           {
               lMessage2.setText("Please enter alphabets for First name ! ");
               Firstnameresult="false";
               status="false";
           }  
           else
           {
               if(Firstnameresult.equals("false"))  
               {    
               value= 0;
               value = value+10 ;
               jProgressBar.setValue(value);
               jProgressBar.setString(Integer.toString(value)+'%');
               status="true";
               Firstnameresult="true";
               }
           }
    }//GEN-LAST:event_FirstnamefieldFocusLost

    private void MiddlenamefieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MiddlenamefieldFocusLost
        lMessage.setText("");
        lMessage2.setText("");
        Validation validate = new Validation();
        status="false";
         /*
        Below method call validates Middlename Field
        */
        boolean s1= validate.validateName(Middlenamefield.getText());
                
           if(Middlenamefield.getText().equals(""))
           {
               lMessage2.setText("");  
               status="true";
           }
           else if(!s1)
           {
              lMessage2.setText(" Middle name shall be blank or containing alphabets! ");  
               status="false"; 
           }
           
    }//GEN-LAST:event_MiddlenamefieldFocusLost

    private void LastnamefieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_LastnamefieldFocusLost
        lMessage.setText("");
        lMessage2.setText("");
        Validation validate = new Validation();
        status="false";
        
         /*
        Below method call validates Lastname Field
        */
        boolean s1= validate.validateName(Lastnamefield.getText());
          
         /*
        Below condition check whether the text field is blank
        */
         if(Lastnamefield.getText().equals(""))
          {
              lMessage2.setText(" Last name can't be blank !! ");  
              if(Lastnameresult.equals("true"))
              {
                  value = value-10 ;
                  jProgressBar.setValue(value);
                  jProgressBar.setString(Integer.toString(value)+'%');
                  Lastnameresult="false";
              }
              return ;
          }
          /*
        Below condition validates the text field
        */
        
           if(!s1)
           {
               lMessage2.setText(" Last name shall be containing alphabets only!! "); 
               Lastnameresult="false";
               status="false";
           }
           else
           {
               
         /*
        Below condition check whether progress bar need to be updated or not
        */
               if(Lastnameresult.equals("false"))  
               {
               value = value+11 ;
               jProgressBar.setValue(value);
               jProgressBar.setString(Integer.toString(value)+'%');
               status="true";
               Lastnameresult="true";
               }
           }
    }//GEN-LAST:event_LastnamefieldFocusLost

    private void Address1fieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Address1fieldFocusLost
        lMessage.setText("");
        lMessage2.setText("");
        Validation validate = new Validation();
        status="false";
        
         /*
        Below method call validates Address Field 1
        */
        boolean s1= validate.validateAddress(Address1field.getText());
                
          if(Address1field.getText().equals(""))
          {
              lMessage2.setText(" Address field 1 can't be blank !! ");  
              if(Address1result.equals("true"))
              {
                  value = value-12 ;
                  jProgressBar.setValue(value);
                  jProgressBar.setString(Integer.toString(value)+'%');
                  Address1result="false";
              }
              return ;
          }
          if(!s1)
           {
               lMessage2.setText(" Address field shouldn't contain special characters!! ");  
               //Address1result="false";
               status="false";
           }     
           else
           {
                /*
        Below condition check whether progress bar need to be updated or not
        */
               if(Address1result.equals("false"))  
               {
               value = value+12 ;
               jProgressBar.setValue(value);
               jProgressBar.setString(Integer.toString(value)+'%');
               status="true";
               Address1result="true";
               }
           }
    }//GEN-LAST:event_Address1fieldFocusLost

    private void Address2fieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Address2fieldFocusLost
       lMessage.setText("");
        lMessage2.setText("");
        Validation validate = new Validation();
        status="false";
        /*
        Below method call validates Address Field 2
        */
        boolean s1= validate.validateAddress(Address2field.getText());
                
          if(Address2field.getText().equals(""))
           {
               lMessage2.setText("");  
               status="true";
           }
           else if(!s1)
           {
              lMessage2.setText(" Address field should not contain special characters! ");  
               status="false"; 
           }
           
    }//GEN-LAST:event_Address2fieldFocusLost

    private void CityfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CityfieldFocusLost
        lMessage.setText("");
        lMessage2.setText("");
        Validation validate = new Validation();
        status="false";
        
        /*
        Below method call validates City Field
        */
        boolean s1= validate.validateName(Cityfield.getText());
                
            if(Cityfield.getText().equals(""))
          {
              lMessage2.setText(" City can't be left blank !! ");  
              if(Cityresult.equals("true"))
              {
                  value = value-12 ;
                  jProgressBar.setValue(value);
                  jProgressBar.setString(Integer.toString(value)+'%');
                  Cityresult="false";
              }
              return ;
          }
        
           if(!s1)
           {
               lMessage2.setText("Please enter alphabets only in City name ! ");
             //  Cityresult="false";
               status="false";
           }
           else
           {
                /*
        Below condition check whether progress bar need to be updated or not
        */
               if(Cityresult.equals("false"))  
               {
               value = value+10 ;
               jProgressBar.setValue(value);
               jProgressBar.setString(Integer.toString(value)+'%');
               status="true";
               Cityresult="true";
               }
           }
    }//GEN-LAST:event_CityfieldFocusLost

    private void StatefieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_StatefieldFocusLost
       lMessage.setText("");
       lMessage2.setText("");
       status="false";
       
       
       Validation validate = new Validation();
        /*
        Below method call validates State Field
        */
        boolean s1= validate.validateName(Statefield.getText());
                
         if(Statefield.getText().equals(""))
          {
              lMessage2.setText(" State can't be left blank !! ");  
              if(Stateresult.equals("true"))
              {
                  value = value-12 ;
                  jProgressBar.setValue(value);
                  jProgressBar.setString(Integer.toString(value)+'%');
                  Stateresult="false";
              }
              return ;
          }   
        
        if(!s1)
           {
               lMessage2.setText("Please enter alphabets only in State name ! ");
            //   Stateresult="false";
               status="false";
           }
           else
           {
                /*
        Below condition check whether progress bar need to be updated or not
        */
               if(Stateresult.equals("false"))  
               {
               value = value+10 ;
               jProgressBar.setValue(value);
               jProgressBar.setString(Integer.toString(value)+'%');
               status="true";
               Stateresult="true";
               }        
           }
    }//GEN-LAST:event_StatefieldFocusLost

    private void ZipcodefieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ZipcodefieldFocusLost
        lMessage.setText("");
        lMessage2.setText("");
        Validation validate = new Validation();
        status="false";
       
        /*
        Below method call validates Zipcode Field
        */
        boolean s1= validate.validatePhone(Zipcodefield.getText());
         
         if(Zipcodefield.getText().equals(""))
          {
              lMessage2.setText(" Zipcode can't be blank !! ");  
               if(Zipcoderesult.equals("true"))
              {
                  value = value-12 ;
                  jProgressBar.setValue(value);
                  jProgressBar.setString(Integer.toString(value)+'%');
                  Zipcoderesult="false";
              }
              return ;
          }
        
           if(!s1)
           {
               lMessage2.setText("Please enter numbers only in Zipcode ! ");
          //     Zipcoderesult="false";
               status="false";
           }
           else
           {
                /*
        Below condition check whether progress bar need to be updated or not
        */
               if(Zipcoderesult.equals("false"))  
               {
               value = value+10 ;
               jProgressBar.setValue(value);
               jProgressBar.setString(Integer.toString(value)+'%');
               status="true";
               Zipcoderesult="true";
               }
           }
    }//GEN-LAST:event_ZipcodefieldFocusLost

    private void PhonenumberfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PhonenumberfieldFocusLost
        lMessage.setText(""); 
        lMessage2.setText("");
        Validation validate = new Validation();
        status="false";
       
        /*
        Below method call validates Phone Field
        */
        boolean s1= validate.validatePhone(Phonenumberfield.getText());
                
         if(Phonenumberfield.getText().equals(""))
          {
              lMessage2.setText(" Phone number can't be left blank !! ");  
               if(Phonenumberresult.equals("true"))
              {
                  value = value-12 ;
                  jProgressBar.setValue(value);
                  jProgressBar.setString(Integer.toString(value)+'%');
                  Phonenumberresult="false";
              }
              return ;
          }   
        
        if(!s1)
           {
               lMessage2.setText("Please enter numbers only in Phonenumber ! ");
           //    Phonenumberresult="false";
               status="false";
           }
           else
           {
               /*
        Below condition check whether progress bar need to be updated or not
        */
               if(Phonenumberresult.equals("false"))  
               {
               value = value+10 ;
               jProgressBar.setValue(value);
               jProgressBar.setString(Integer.toString(value)+'%');
               status="true";
               Phonenumberresult="true";
               }
           }
    }//GEN-LAST:event_PhonenumberfieldFocusLost

    private void MaintableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MaintableFocusLost
       
        
    }//GEN-LAST:event_MaintableFocusLost

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
    /*  Validation validation = new Validation();
      String s1="true" ;
      s1 = validation.Clear();*/
    }//GEN-LAST:event_formFocusGained

    private void CountryfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CountryfieldFocusLost
        // TlMessage.setText(""); 
        lMessage2.setText("");
        Validation validate = new Validation();
        status="false";
        
        /*
        Below method call validates Phone Field
        */
        boolean s1= validate.validateName(Countryfield.getText());
                
         if(Countryfield.getText().equals(""))
          {
              lMessage2.setText(" Country can't be blank !! ");  
               if(Countryresult.equals("true"))
              {
                  value = value-12 ;
                  jProgressBar.setValue(value);
                  jProgressBar.setString(Integer.toString(value)+'%');
                  Countryresult="false";
              }
              return ;
          }   
        
        if(!s1)
           {
               lMessage2.setText("Please enter alphabets for Country name ");
          //     Countryresult="false";
               status="false";
           }
           else
           { /*
            Below condition check whether progress bar need to be updated or not
             */
             
               if(Countryresult.equals("false"))  
               {
               value = value+10 ;
               jProgressBar.setValue(value);
               jProgressBar.setString(Integer.toString(value)+'%');
               status="true";
               Countryresult="true";
               }
           }
    }//GEN-LAST:event_CountryfieldFocusLost

    private void EmailfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_EmailfieldFocusLost
        lMessage.setText(""); 
        lMessage2.setText("");
        Validation validate = new Validation();
        status="false";
        
        /*
        Below method call validates Phone Field
        */
        boolean s1= validate.validateEmail(Emailfield.getText());
                
         if(Emailfield.getText().equals(""))
          {
              lMessage2.setText(" E mail can't be blank !! ");  
               if(Emailresult.equals("true"))
              {
                  value = value-12 ;
                  jProgressBar.setValue(value);
                  jProgressBar.setString(Integer.toString(value)+'%');
                  Emailresult="false";
              }
              return ;
          }
        
        if(!s1)
           {
               lMessage2.setText("Please enter a valid email ! ");
         //      Emailresult="false";
               status="false";
               
           }
           else
           {
                /*
        Below condition check whether progress bar need to be updated or not
        */
               
               if(Emailresult.equals("false"))  
               {
               value = value+10 ;
               jProgressBar.setValue(value);
               jProgressBar.setString(Integer.toString(value)+'%');
               status="true";
               Emailresult="true";
               }
           }
    }//GEN-LAST:event_EmailfieldFocusLost

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        Validation v1 = new Validation();
        if(Maintable.getSelectedRow()!=-1)
        {
             /*
        Below code deselects the table
        */
            v1.Clear();
            Maintable.getSelectionModel().clearSelection();
            jProgressBar.setVisible(true);
            jProgressBar.setEnabled(true);
            value =0 ;
            jProgressBar.setValue(value);
            jProgressBar.setString(Integer.toString(value)+'%');
            Firstnamefield.requestFocus();
        }
    }//GEN-LAST:event_formMouseClicked
      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DetailsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DetailsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DetailsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DetailsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DetailsFrame().setVisible(true);
            }
        });
        Thread.sleep(1000);
        /*
        setting table model row count to Zero and setting column names
        */
        tablemodel.setRowCount(0);
        tablemodel.setColumnIdentifiers(new Object[]{"First Name","Last Name","Phone Number"});
        Maintable.setModel(tablemodel);
        Maintable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        Fileoperations fp= new Fileoperations();
          
        //  String inputValue =  fp.ReadFromFile();
        //  String[] inpArray = inputValue.split("\t");
        //   tablemodel.addRow(inpArray);
          fp.ReadFromFile();
          
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Addbutton;
    public static javax.swing.JTextField Address1field;
    private javax.swing.JLabel Address1label;
    public static javax.swing.JTextField Address2field;
    private javax.swing.JLabel Address2label;
    public static javax.swing.JTextField Cityfield;
    private javax.swing.JLabel Citylabel;
    public static javax.swing.JTextField Countryfield;
    private javax.swing.JLabel Countrylabel;
    private javax.swing.JButton Deletebutton;
    public static javax.swing.JTextField Emailfield;
    private javax.swing.JLabel Emaillabel;
    public static javax.swing.JTextField Firstnamefield;
    private javax.swing.JLabel Firstnamelabel;
    public static javax.swing.JComboBox Genderfield;
    private javax.swing.JLabel Genderlabel;
    public static javax.swing.JTextField Lastnamefield;
    private javax.swing.JLabel Lastnamelabel;
    public static javax.swing.JTable Maintable;
    public static javax.swing.JTextField Middlenamefield;
    private javax.swing.JLabel Middlenamelabel;
    public static javax.swing.JTextField Phonenumberfield;
    private javax.swing.JLabel Phonenumberlabel;
    private javax.swing.JButton Savebutton;
    public static javax.swing.JTextField Statefield;
    private javax.swing.JLabel Statelabel;
    public static javax.swing.JTextField Zipcodefield;
    private javax.swing.JLabel Zipcodelabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lMessage;
    private javax.swing.JLabel lMessage2;
    // End of variables declaration//GEN-END:variables
public class JTextFieldLimit extends PlainDocument {
 private int limit;

  JTextFieldLimit(int limit) {
   super();
   this.limit = limit;
   }

  public void insertString( int offset, String  str, AttributeSet attr ) throws BadLocationException {
    if (str == null) return;

    if ((getLength() + str.length()) <= limit) {
      super.insertString(offset, str, attr);
    }
  }   
}
public boolean isCellEditable(int row, int column) {                
                return false;               
        }
/*
public static void centreWindow(Window frame) {
    Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
    int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
    int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
    frame.setLocation(x, y);
}
*/
}

